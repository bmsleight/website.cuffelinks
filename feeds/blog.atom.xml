<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cuffelinks</title><link href="/" rel="alternate"></link><link href="/feeds/blog.atom.xml" rel="self"></link><id>/</id><updated>2015-05-27T20:00:00+01:00</updated><entry><title>Real Laser Cut Cufflinks</title><link href="/real-laser-cut-cufflinks.html" rel="alternate"></link><updated>2015-05-27T20:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-05-27:real-laser-cut-cufflinks.html</id><summary type="html">&lt;p&gt;Following on from &lt;a href="./laser-cut-traffic-light-cufflink.html"&gt;Laser Cut Traffic Light Cufflink&lt;/a&gt; I fired up the &lt;a href="https://wiki.london.hackspace.org.uk/view/Silvertail_A0_Laser_Cutter"&gt;London Hackspace Laser Cutter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/I_have_the_power.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Which left me with some nice parts to glue together using &lt;a href="https://groups.google.com/forum/#!searchin/london-hack-space/plastic$20weld/london-hack-space/F3jq7xy5P9Y/k2PqjgshpQ0J"&gt;plastic weld&lt;/a&gt;
&lt;a href="images/Real-Laser-Cut-Cufflinks/parts.jpg"&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/thumbnails/480x_/parts.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I weld the layers together, with a screw embedded, then bolt the top layer. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Real-Laser-Cut-Cufflinks/embed.jpg"&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/thumbnails/480x_/embed.jpg" /&gt;&lt;/a&gt;
&lt;a href="images/Real-Laser-Cut-Cufflinks/fitted.jpg"&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/thumbnails/480x_/fitted.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Screw/Bolt head Too Big&lt;/h4&gt;
&lt;p&gt;The bolt head is too big - forcing the sides out. I will just drop down to M1.6 screws, not M2 so that the head is ~3mm diameter. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Real-Laser-Cut-Cufflinks/too-big.jpg"&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/thumbnails/480x_/too-big.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Fingerprints in Weld&lt;/h4&gt;
&lt;p&gt;The welding of the parts has tell tale signs of a fingerprints, so I need to build a jig to hold them whilst welding. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Real-Laser-Cut-Cufflinks/finished.jpg"&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/thumbnails/480x_/finished.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Still they work as cufflinks&lt;/p&gt;
&lt;p&gt;&lt;a href="images/Real-Laser-Cut-Cufflinks/shirt.jpg"&gt;&lt;img src="images/Real-Laser-Cut-Cufflinks/thumbnails/480x_/shirt.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I just need to get the &lt;a href="./i-hate-soldering.html"&gt;electronics working...&lt;/a&gt;&lt;/p&gt;</summary><category term="cuffelinks"></category><category term="traffic"></category></entry><entry><title>I Hate Soldering</title><link href="/i-hate-soldering.html" rel="alternate"></link><updated>2015-05-06T14:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-05-06:i-hate-soldering.html</id><summary type="html">&lt;p&gt;I am not very good at soldering and for this project with have lots of SMD to get on to a PCB. I have many a swear word and many a curse. So after extensive searching, I have ordered a &lt;a href="https://www.youtube.com/watch?v=vva2t21sOAs"&gt;Hot Air rework station&lt;/a&gt;. I have also used the &lt;a href="https://wiki.london.hackspace.org.uk/view/Silvertail_A0_Laser_Cutter"&gt;London Hackspace Laser Cutter&lt;/a&gt; to make a jog and a solder stecil. &lt;/p&gt;
&lt;p&gt;Before a sencil and Hot Air rework station:-&lt;/p&gt;
&lt;p&gt;&lt;a href="images/I-Hate-Soldering/soldering.jpg"&gt;&lt;img src="images/I-Hate-Soldering/thumbnails/480x_/soldering.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The basic instructions are from &lt;a href="http://www.meatandnetworking.com/tutorials/creating-svg-files-worth-of-creating-solder-stencils-from-kicad/"&gt;Meat and Networking&lt;/a&gt;, however I add some extra shapes on new layers so I could have a jig. Includeding some screw holes. The same files is used to cut the stencil and the jig, just turn off the yellow and red layers as approproate. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/I-Hate-Soldering/jig.png"&gt;&lt;img src="images/I-Hate-Soldering/thumbnails/480x_/jig.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The only problem I had is the sizing was out by 40% increase. This was solved by takign the outsize shape diemensions in Inkscape, and using the re-size function in the laser cutter (interesting) program. Then fiddling around with &lt;a href="https://groups.google.com/forum/#!topic/london-hack-space/HJ6McVyd8jU"&gt;Acetate setting&lt;/a&gt; to set a nice stencil. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/I-Hate-Soldering/stencil.jpg"&gt;&lt;img src="images/I-Hate-Soldering/thumbnails/480x_/stencil.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I can spend a day in the holidays trying to solder with little excuses. &lt;/p&gt;</summary><category term="cuffelinks"></category><category term="soldering"></category></entry><entry><title>Stop that Flash Jitter</title><link href="/stop-that-flash-jitter.html" rel="alternate"></link><updated>2015-05-06T14:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-05-06:stop-that-flash-jitter.html</id><summary type="html">&lt;p&gt;Now I have written a full, interrupt driven sketches for an &lt;a href="https://github.com/bmsleight/arduino-traffic-signals"&gt;arduino running some traffic signals&lt;/a&gt;. An extract is shown below:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PHASE_GREEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_phase_change&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;PHASE_CHANGE_TO_RED&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// On Green want Red&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ran_min_green&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PHASE_POST_GREEN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;_phase_change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PHASE_CHANGE_NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;_time_since_green_milliseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;_time_on_current_state_milliseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug_to_serial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Leaving Green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="images/Stop-that-Flash-Jitter/arduino-traffic-signals.gif" /&gt;&lt;/p&gt;
&lt;p&gt;However for this project, I do not need interrupts - so I using some simplicity on the timing. I also do not want the signals to cycle forever so I have added an END_SEQUENCE. Based upon the &lt;a href="./rectangle-rag-pcb.html"&gt;rectangle PCB&lt;/a&gt; With the following circuit, I put together a simple sketch. I borrowed the concept of using bits for each of the Red, Amber and Green from &lt;a href="http://homepage.ntlworld.com/vangelderp/"&gt;Paul Van Gelder&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Stop-that-Flash-Jitter/circuit-diagram.png"&gt;&lt;img src="images/Stop-that-Flash-Jitter/thumbnails/480x_/circuit-diagram.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define RED 1&lt;/span&gt;
&lt;span class="cp"&gt;#define AMBER 2&lt;/span&gt;
&lt;span class="cp"&gt;#define GREEN 4&lt;/span&gt;
&lt;span class="cp"&gt;#define RED_FLASH 8&lt;/span&gt;
&lt;span class="cp"&gt;#define AMBER_FLASH 16&lt;/span&gt;
&lt;span class="cp"&gt;#define GREEN_FLASH 32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then I can define each sequence as follows:-&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SEQUENCE_TYPES&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;MAX_STEPS&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Normal Traffic RAG&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;AMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;AMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;END_SEQUENCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With some neat boolean logic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;flash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// or ~255 (0)&lt;/span&gt;
&lt;span class="n"&gt;leds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;current_step&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leds&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;RED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leds&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;RED_FLASH&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My first attempt, I was running low on memory for global variables. Which in the end caused the ATTiny45 to crash. The solution is to use &lt;a href="http://www.arduino.cc/en/Reference/PROGMEM"&gt;PROGMEM - Store data in flash (program) memory instead of SRAM&lt;/a&gt;. Using PROGMEM is also a two-step procedure, it requires special methods (functions) to read the data from program memory back into SRAM, so we can do something useful with it. Some good hints from this &lt;a href="https://github.com/lilspikey/arduino_sketches/blob/master/attiny/xmas/xmas.ino"&gt;sketch&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;leds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pgm_read_word_near&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;current_step&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;All solved ?&lt;/strong&gt; Well no, &lt;a href="http://homepage.ntlworld.com/vangelderp/"&gt;Paul Van Gelder&lt;/a&gt; posted a change to &lt;a href="https://github.com/bmsleight/chameleon-cufflink/pull/1/files"&gt;Stop that Flash Jitter&lt;/a&gt;. Which worked very well:-&lt;/p&gt;
&lt;p&gt;&lt;img src="images/Stop-that-Flash-Jitter/Stop_That_Jitter.gif" /&gt;&lt;/p&gt;</summary><category term="cuffelinks"></category><category term="traffic"></category><category term="rag"></category><category term="arduino"></category></entry><entry><title>Fail - Circular RGB PCB</title><link href="/fail-circular-rgb-pcb.html" rel="alternate"></link><updated>2015-05-04T17:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-05-04:fail-circular-rgb-pcb.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Epic fail&lt;/strong&gt;. My &lt;a href="./circular-rgb-pcb.html"&gt;circular PCB&lt;/a&gt; will not work. I did the testing using 5V from the arduino nano board. Without thinking through what the cell batteries will actually deliver. Looking up the &lt;a href="http://www.adafruit.com/datasheets/TCS34725.pdf"&gt;datasheet for the TCS34725&lt;/a&gt; I remembers that I needed at least 3V3 for the supply, also the Blue LED on the &lt;a href="http://www.avagotech.com/docs/AV02-2451EN"&gt;HSMF-C114&lt;/a&gt; of typically 3V4. No problem - I had designed the circuit to run on 2 cell barreries, which deliver 6V.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; The cells delivery between 3V and 3V7. In reality I am getting above 3V with one cell, in fact enough to run the Green LED at 3V4. However if I run the ATTiny with one cell the voltage drops are such that the Green and blue LED are not lit. &lt;/p&gt;
&lt;p&gt;Ok two cells. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt; The cells delivery between 3V and 3V7. So this gives above 6V, which mean the ATTiny cuts out. &lt;/p&gt;
&lt;h4&gt;Just one cell - direct to Green LED&lt;/h4&gt;
&lt;p&gt;&lt;img src="images/Fail-Circular-RGB-PCB/Above_3V.gif" /&gt;&lt;/p&gt;
&lt;h4&gt;Just one cell - via ATTiny no Green&lt;/h4&gt;
&lt;p&gt;&lt;img src="images/Fail-Circular-RGB-PCB/fail_2_voltages._..,.gif" /&gt;&lt;/p&gt;
&lt;h4&gt;Two cells - ATTinys cuts out&lt;/h4&gt;
&lt;p&gt;&lt;img src="images/Fail-Circular-RGB-PCB/fail_explanation_later.gif" /&gt;&lt;/p&gt;
&lt;h3&gt;Ok Give me Solutions&lt;/h3&gt;
&lt;p&gt;So how do I get around this problem ? &lt;/p&gt;
&lt;p&gt;I discounted &lt;a href="http://en.wikipedia.org/wiki/Zener_diode"&gt;zener diodes&lt;/a&gt;, current leakage too high. Also &lt;a href="http://en.wikipedia.org/wiki/Voltage_divider"&gt;Voltage divider&lt;/a&gt; for the same reason.  There must be a small form IC .... After many minutes googling. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.linear.com/product/LTC3212"&gt;LTC3212 - RGB LED Driver and Charge Pump&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;From the &lt;a href="http://www.linear.com/product/LTC3212"&gt;product page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power and Current Control for Driving RGB LEDs&lt;/li&gt;
&lt;li&gt;Individually Programmable Current Sources&lt;/li&gt;
&lt;li&gt;1x or 2x Mode, Low Noise, Constant Frequency Charge Pump&lt;/li&gt;
&lt;li&gt;Single Wire Enable Control for All LEDs&lt;/li&gt;
&lt;li&gt;White Mode Adjusts R, G, B Currents for White Light&lt;/li&gt;
&lt;li&gt;25mA Maximum LED Current&lt;/li&gt;
&lt;li&gt;VIN Range: 2.7V to 5.5V&lt;/li&gt;
&lt;li&gt;Automatic Soft-Start, Mode Switching and Output Disconnect in Shutdown Mode&lt;/li&gt;
&lt;li&gt;Available in 12-Lead (3mm × 2mm) DFN Package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="images/Fail-Circular-RGB-PCB/7205.png"&gt;&lt;img src="images/Fail-Circular-RGB-PCB/thumbnails/480x_/7205.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have requested some &lt;a href="http://www.linear.com/samples/LTC3212"&gt;samples&lt;/a&gt;, and whipped up another &lt;a href="https://github.com/bmsleight/chameleon-cufflink/tree/master/pcb/breakout-test-pcb-LTC3212"&gt;breakout board in KiCAD&lt;/a&gt; order with &lt;a href="https://oshpark.com/"&gt;https://oshpark.com/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/Fail-Circular-RGB-PCB/oshpark1.png"&gt;&lt;img src="images/Fail-Circular-RGB-PCB/thumbnails/480x_/oshpark1.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Love the costs&lt;/h3&gt;
&lt;p&gt;&lt;a href="images/Fail-Circular-RGB-PCB/oshpark2.png"&gt;&lt;img src="images/Fail-Circular-RGB-PCB/thumbnails/480x_/oshpark2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Final notes&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://oshpark.com/"&gt;https://oshpark.com/&lt;/a&gt; has just emailed within a few hours....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We've sent the panel containing your boards to the fabricator. We expect to get them back around May 16th.
In case you're interested, there are 82 other orders on the panel along with yours, adding up to a total of 450 boards. Neat eh? &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="cuffelinks"></category><category term="rgb"></category><category term="PCB"></category><category term="fail"></category></entry><entry><title>Circular RGB PCB</title><link href="/circular-rgb-pcb.html" rel="alternate"></link><updated>2015-04-27T21:34:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-04-27:circular-rgb-pcb.html</id><summary type="html">&lt;p&gt;I spent some time over the weekend making the RGB version of the cufflink as small as possible, in particular the PCB. The overall size is limited by the cell being 12.5mm diameter. It is differrcult to embed the fixing screws in the same way as &lt;a href="../laser-cut-traffic-light-cufflink.html"&gt;outlines for rectangular cufflink&lt;/a&gt;. However I can squeeze the layers down to 5. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Circular-RGB-PCB/layers_clear.png"&gt;&lt;img src="images/Circular-RGB-PCB/thumbnails/480x_/layers_clear.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With the design in mind, I planned out the PCB. It was really tight to get all the routes in via &lt;a href="http://rusefi.com/forum/viewtopic.php?f=4&amp;amp;t=593"&gt;freerouting&lt;/a&gt; . In the end I got a working PCB layout.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/Circular-RGB-PCB/circuit.png"&gt;&lt;img src="images/Circular-RGB-PCB/thumbnails/480x_/circuit.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="images/Circular-RGB-PCB/3dview.gif" /&gt;&lt;/p&gt;</summary><category term="cuffelinks"></category><category term="rgb"></category><category term="PCB"></category></entry><entry><title>Rectangle RAG PCB</title><link href="/rectangle-rag-pcb.html" rel="alternate"></link><updated>2015-04-22T23:59:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-04-22:rectangle-rag-pcb.html</id><summary type="html">&lt;p&gt;Following some fun looking at &lt;a href="../laser-cut-traffic-light-cufflink.html"&gt;outlines for laser-cut-traffic-light-cufflink.html&lt;/a&gt; I whipped up a quick PCB using &lt;a href="http://www.kicad-pcb.org/display/KICAD/KiCad+EDA+Software+Suite"&gt;KiCad&lt;/a&gt;. Was quite surprised when all the components fit on the PCB and the routing was possible, I thought it would not work. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/rectangle-rag-pcb/kicad.png"&gt;&lt;img src="images/rectangle-rag-pcb/thumbnails/480x_/kicad.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can view all the raw KiCad files in the &lt;a href="https://github.com/bmsleight/chameleon-cufflink/tree/master/pcb/rectangle-rag-pcb"&gt;git repository&lt;/a&gt;. I test the gerber files at &lt;a href="https://oshpark.com/"&gt;oshpark&lt;/a&gt; although I have not ordered them.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/rectangle-rag-pcb/oshpark.png"&gt;&lt;img src="images/rectangle-rag-pcb/thumbnails/480x_/oshpark.png" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="cuffelinks"></category><category term="traffic"></category><category term="PCB"></category></entry><entry><title>Laser Cut Traffic Light Cufflink</title><link href="/laser-cut-traffic-light-cufflink.html" rel="alternate"></link><updated>2015-04-20T23:59:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-04-20:laser-cut-traffic-light-cufflink.html</id><summary type="html">&lt;p&gt;I had a play with a laser-cut rectangle case for the traffic light cufflink. First step was using &lt;a href="https://www.tinkercad.com/"&gt;Tinkercad&lt;/a&gt; to create a 3-d sketch/mock-up. Still looks very tight to get the traces to fit on the PCB. This is with an outside case of 13.5 x 22.00 mm. I designed the screws to be captive between the 3,4 &amp;amp; 5 layers of acrylic. &lt;/p&gt;
&lt;p&gt;Key:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Black - ATTiny45&lt;/li&gt;
&lt;li&gt;Green - LEDs&lt;/li&gt;
&lt;li&gt;Purple - switch&lt;/li&gt;
&lt;li&gt;Orange - nylon screw&lt;/li&gt;
&lt;li&gt;Brown - wire to cell&lt;/li&gt;
&lt;li&gt;Silver - cell&lt;/li&gt;
&lt;li&gt;Yellow - push connector to button&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="images/Laser-Cut-Traffic-Light-Cufflink/tinker-cad-rectangle-2.png"&gt;&lt;img src="images/Laser-Cut-Traffic-Light-Cufflink/thumbnails/480x_/tinker-cad-rectangle-2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, I have used a nice &lt;a href="https://github.com/bmsleight/chameleon-cufflink/blob/master/case/laser_RAG.py"&gt;python script&lt;/a&gt; to generate a dxf file than can be laoded on the &lt;a href="https://wiki.london.hackspace.org.uk/view/Silvertail_A0_Laser_Cutter"&gt;laser cutter&lt;/a&gt;. Again using the most excellent &lt;a href="https://pypi.python.org/pypi/dxfwrite/"&gt;dxfwrite&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Laser-Cut-Traffic-Light-Cufflink/layers_RGB.png"&gt;&lt;img src="images/Laser-Cut-Traffic-Light-Cufflink/thumbnails/480x_/layers_RGB.png" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="cuffelinks"></category><category term="traffic"></category></entry><entry><title>RGB Components</title><link href="/rgb-components.html" rel="alternate"></link><updated>2015-04-19T21:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-04-19:rgb-components.html</id><summary type="html">&lt;p&gt;I am tring to work out how many layers of laser cut acrylic I will need, in total. I am using 2mm acrylic.&lt;/p&gt;
&lt;p&gt;&lt;a href="images/RGB-Components/sketch.jpg"&gt;&lt;img src="images/RGB-Components/thumbnails/480x_/sketch.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have used a nice &lt;a href="https://github.com/bmsleight/chameleon-cufflink/blob/master/case/laser_clear.py"&gt;python script&lt;/a&gt; to generate a dxf file than can be laoded on the &lt;a href="https://wiki.london.hackspace.org.uk/view/Silvertail_A0_Laser_Cutter"&gt;laser cutter&lt;/a&gt;. It used the most excellent &lt;a href="https://pypi.python.org/pypi/dxfwrite/"&gt;dxfwrite&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;At the moment I have six layers:-&lt;/p&gt;
&lt;p&gt;&lt;a href="images/RGB-Components/laser_clear.png"&gt;&lt;img src="images/RGB-Components/thumbnails/480x_/laser_clear.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It would be nice to reduce this down by one or two. Limiting factors:-&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two x Cell battery &lt;a href="http://en.wikipedia.org/wiki/List_of_battery_sizes#Button_cells_-_coin.2C_watch"&gt;CR1216 12.5 × 1.6 height&lt;/a&gt; total: 3.2mm&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dirtypcbs.com/"&gt;PCB Thinkness 0.6 to 0.8mm thickness&lt;/a&gt; Total 0.8mm&lt;/li&gt;
&lt;li&gt;Switch - found a &lt;a href="http://www.mouser.com/ds/2/307/en-b3u-3615.pdf"&gt;lovely switch 1.2mm height&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="images/RGB-Components/switch.png"&gt;&lt;img src="images/RGB-Components/thumbnails/480x_/switch.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Giving at least 5.2mm, which means I can not (thanks to the switch) fit everything in just 5 layers. Top, bottom and 6mm inners. Time to sketch the PCB in &lt;a href="https://www.tinkercad.com/"&gt;https://www.tinkercad.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Mock Up of PCB&lt;/h4&gt;
&lt;p&gt;&lt;a href="images/RGB-Components/tinkercad_mock_up.png"&gt;&lt;img src="images/RGB-Components/thumbnails/480x_/tinkercad_mock_up.png" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="cuffelinks"></category><category term="rgb"></category><category term="python"></category><category term="dxf"></category></entry><entry><title>Miniature RGB</title><link href="/miniature-rgb.html" rel="alternate"></link><updated>2015-04-19T17:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-04-19:miniature-rgb.html</id><summary type="html">&lt;p&gt;I designed a &lt;a href="https://github.com/bmsleight/chameleon-cufflink/tree/master/pcb/breakout-test-pcb"&gt;prototype PCB&lt;/a&gt; in kicad and then ordered a small batch of them from the great &lt;a href="https://oshpark.com/"&gt;oshpark.com&lt;/a&gt;. I used interesting method to solder them, put the PCB on a standalone electric hotplate, move the components in to place with the aid of a USB microscope. &lt;/p&gt;
&lt;p&gt;&lt;a href="images/Miniature-RGB/soldering.jpg"&gt;&lt;img src="images/Miniature-RGB/thumbnails/480x_/soldering.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This actually worked, but proved I needed two cells to run all colours red, green and blue. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/Miniature-RGB/Successfully_soldering.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Wired up to a simple sketch, to give some random colours. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Alt text" src="images/Miniature-RGB/Quite_good_RGB_need_to_tweak_to_reduce_flicker.gif" /&gt;&lt;/p&gt;
&lt;p&gt;I have since improved &lt;a href="https://github.com/bmsleight/chameleon-cufflink/blob/master/software/chameleon/simple-random-colour.ino"&gt;the script&lt;/a&gt; a little to reduce the flicker. &lt;/p&gt;</summary><category term="cuffelinks"></category><category term="rgb"></category></entry><entry><title>Pelican is cool</title><link href="/pelican-is-cool.html" rel="alternate"></link><updated>2015-04-19T10:00:00+01:00</updated><author><name>Brendan M. Sleight</name></author><id>tag:,2015-04-19:pelican-is-cool.html</id><summary type="html">&lt;p&gt;Cuffelinks is super cool.
.&lt;/p&gt;</summary><category term="pelican"></category></entry></feed>